# GARCH fit
garchfit <- ugarchfit(data=datalist[[i]], spec=garchspec,solver="hybrid")
gjrgarchfit <- ugarchfit(data=datalist[[i]], spec=gjrgarchspec,solver="hybrid")
# ICs for choosing model
sg_info <- infocriteria(garchfit)[1]
gjrg_info <- infocriteria(gjrgarchfit)[1]
if (sg_info <= gjrg_info){
iout<- newsimpact(garchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error with Standard Garch"),ylab="predicted variance")
models[[i]] <- garchfit
models[[5+i]] <- garchspec
}else{
iout<-newsimpact(gjrgarchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error with GJR Garch"),ylab="predicted variance")
models[[i]] <- gjrgarchfit
models[[5+i]] <- gjrgarchspec
}
}
#------------------------Validate Model----------------
# Ljung-Box Test for Autocorrelation
# Goodness-to-fit Test for white noise normality
# ARCH LM Test for ARCH Effect
plotlist <- list("CI1","CI2","CI3","CI4","CI5","VaR1","VaR2","VaR3","VaR4","VaR5")
for(i in 1:5){
model <- models[[i]]
spec <- models[[5+i]]
model
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1848,
refit.window="moving",
refit.every=5,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5),
solver="hybrid")
#gjrgarchroll = resume(gjrgarchroll,solver="gosolnp",solver.control=list(tol=1e-4,delta=1e-5))
preds <- as.data.frame(gjrgarchroll)
#calculating 95% CIs for each prediction
preds$lower_bound <- preds$Mu - 1.96*preds$Sigma
preds$upper_bound <- preds$Mu + 1.96*preds$Sigma
preds$days <- as.Date(rownames(preds))
#calculate coverage rate
CR <- mean(preds$Realized <= preds$upper_bound & preds$Realized >= preds$lower_bound)
#plot CI
plot <- ggplot(data = preds, aes(x=days, y=Realized,group = 1)) +
geom_line() +
geom_ribbon(data = preds,aes(ymin = lower_bound,ymax = upper_bound),alpha = 0.3)+
ggtitle(paste0("CIs for predicted returns for ",names[i]," Funds with coverage rate ",CR))
plotlist[[i]] <- plot
gjrgarchVaR <- quantile(gjrgarchroll,probs=.05)
actual <- xts(as.data.frame(gjrgarchroll)$Realized, time(gjrgarchVaR))
#calculate VaR Coverage
VaR <- VaRplot(alpha=.05,actual=actual,VaR=gjrgarchVaR,title = (paste0("VaR with alpha = 5% for ",names[i]," Funds with VaR Coverage ",VaR)))
plotlist[[5+i]] <- VaR
print(paste0(names[i]," Completed"))
}
#------------------------Validate Model----------------
# Ljung-Box Test for Autocorrelation
# Goodness-to-fit Test for white noise normality
# ARCH LM Test for ARCH Effect
plotlist <- list("CI1","CI2","CI3","CI4","CI5","VaR1","VaR2","VaR3","VaR4","VaR5")
for(i in 1:5){
model <- models[[i]]
spec <- models[[5+i]]
model
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1848,
refit.window="moving",
refit.every=5,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5),
solver="hybrid")
#gjrgarchroll = resume(gjrgarchroll,solver="gosolnp",solver.control=list(tol=1e-4,delta=1e-5))
preds <- as.data.frame(gjrgarchroll)
#calculating 95% CIs for each prediction
preds$lower_bound <- preds$Mu - 1.96*preds$Sigma
preds$upper_bound <- preds$Mu + 1.96*preds$Sigma
preds$days <- as.Date(rownames(preds))
#calculate coverage rate
CR <- mean(preds$Realized <= preds$upper_bound & preds$Realized >= preds$lower_bound)
#plot CI
plot <- ggplot(data = preds, aes(x=days, y=Realized,group = 1)) +
geom_line() +
geom_ribbon(data = preds,aes(ymin = lower_bound,ymax = upper_bound),alpha = 0.3)+
ggtitle(paste0("CIs for predicted returns for ",names[i]," Funds with coverage rate ",CR))
plotlist[[i]] <- plot
gjrgarchVaR <- quantile(gjrgarchroll,probs=.05)
actual <- xts(as.data.frame(gjrgarchroll)$Realized, time(gjrgarchVaR))
#calculate VaR Coverage
VaR <- VaRplot(alpha=.05,actual=actual,VaR=gjrgarchVaR,title = (paste0("VaR with alpha = 5% for ",names[i]," Funds with VaR Coverage ",VaR)))
plotlist[[5+i]] <- VaR
print(paste0(names[i]," Completed"))
}
plotlist[[6]]$
;
plotlist[[6]]
knitr::opts_chunk$set(echo = TRUE)
# test for stationary, decide d value
adf.test(df$XLF_log-mean(df$XLF_log))
#------------------------Validate Model----------------
# Ljung-Box Test for Autocorrelation
# Goodness-to-fit Test for white noise normality
# ARCH LM Test for ARCH Effect
plotlist <- list("CI1","CI2","CI3","CI4","CI5","VaR1","VaR2","VaR3","VaR4","VaR5")
for(i in 1:5){
model <- models[[i]]
spec <- models[[5+i]]
model
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1848,
refit.window="moving",
refit.every=5,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5),
solver="hybrid")
#gjrgarchroll = resume(gjrgarchroll,solver="gosolnp",solver.control=list(tol=1e-4,delta=1e-5))
preds <- as.data.frame(gjrgarchroll)
#calculating 95% CIs for each prediction
preds$lower_bound <- preds$Mu - 1.96*preds$Sigma
preds$upper_bound <- preds$Mu + 1.96*preds$Sigma
preds$days <- as.Date(rownames(preds))
#calculate coverage rate
CR <- mean(preds$Realized <= preds$upper_bound & preds$Realized >= preds$lower_bound)
#plot CI
plot <- ggplot(data = preds, aes(x=days, y=Realized,group = 1)) +
geom_line() +
geom_ribbon(data = preds,aes(ymin = lower_bound,ymax = upper_bound),alpha = 0.3)+
ggtitle(paste0("CIs for predicted returns for ",names[i]," Funds with coverage rate ",CR))
plotlist[[i]] <- plot
gjrgarchVaR <- quantile(gjrgarchroll,probs=.05)
gjrgarchVaR
actual <- xts(as.data.frame(gjrgarchroll)$Realized, time(gjrgarchVaR))
#calculate VaR Coverage
VaR <- VaRplot(alpha=.05,actual=actual,VaR=gjrgarchVaR,title = (paste0("VaR with alpha = 5% for ",names[i]," Funds with VaR Coverage ",VaR)))
plotlist[[5+i]] <- VaR
print(paste0(names[i]," Completed"))
}
gjrgarchVaR
for (i in 1:5){
plot <- plotlist[[i]]
plot(plot)
}
models <- list("XLI_fit","XLV_fit","XLK_fit","XLF_fit","XLE_fit","XLI_spec","XLV_spec","XLK_spec","XLF_spec","XLE_spec")
t <- c("std","std","sstd","sstd","std")
# refit GARCH spec with t distribution assumption
sAIC <- c()
gjrAIC <- c()
sBIC <- c()
gjrBIC <- c()
for (i in 1:5){
order <- arima[[i]]
garchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "sGARCH"),
distribution.model = t[i])
gjrgarchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "gjrGARCH"),
distribution.model = t[i])
# GARCH fit
garchfit <- ugarchfit(data=datalist[[i]], spec=garchspec,solver="hybrid")
gjrgarchfit <- ugarchfit(data=datalist[[i]], spec=gjrgarchspec,solver="hybrid")
# ICs for choosing model
sg_info <- infocriteria(garchfit)[1]
sAIC <- c(sAIC,sg_info)
sBIC <- c(sBIC,infocriteria(garchfit)[2])
gjrg_info <- infocriteria(gjrgarchfit)[1]
gjrAIC <- c(gjrAIC,gjrg_info)
gjrBIC <- c(gjrBIC,infocriteria(gjrgarchfit)[2])
if (sg_info <= gjrg_info){
iout<- newsimpact(garchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error with Standard Garch"),ylab="predicted variance")
models[[i]] <- garchfit
models[[5+i]] <- garchspec
}else{
iout<-newsimpact(gjrgarchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error with GJR Garch"),ylab="predicted variance")
models[[i]] <- gjrgarchfit
models[[5+i]] <- gjrgarchspec
}
Infolist <- list("sAIC" = sAIC,"sBIC" = sBIC, "gjrAIC" = gjrAIC,"gjrBIC" = gjrBIC)
#look at standard AIC (in fund order)
sAIC
#look at standard BIC
sBIC
#look at gjr AIC
gjrAIC
#look at gjrBIC
gjrBIC
}
sAIC
#look at standard BIC
sBIC
#look at gjr AIC
gjrAIC
#look at gjrBIC
gjrBIC
models <- list("XLI_fit","XLV_fit","XLK_fit","XLF_fit","XLE_fit","XLI_spec","XLV_spec","XLK_spec","XLF_spec","XLE_spec")
t <- c("std","std","sstd","sstd","std")
# refit GARCH spec with t distribution assumption
sAIC <- c()
gjrAIC <- c()
sBIC <- c()
gjrBIC <- c()
for (i in 1:5){
order <- arima[[i]]
garchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "sGARCH"),
distribution.model = t[i])
gjrgarchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "gjrGARCH"),
distribution.model = t[i])
# GARCH fit
garchfit <- ugarchfit(data=datalist[[i]], spec=garchspec,solver="hybrid")
gjrgarchfit <- ugarchfit(data=datalist[[i]], spec=gjrgarchspec,solver="hybrid")
# ICs for choosing model
sg_info <- infocriteria(garchfit)[1]
sAIC <- c(sAIC,sg_info)
sBIC <- c(sBIC,infocriteria(garchfit)[2])
gjrg_info <- infocriteria(gjrgarchfit)[1]
gjrAIC <- c(gjrAIC,gjrg_info)
gjrBIC <- c(gjrBIC,infocriteria(gjrgarchfit)[2])
if (sg_info <= gjrg_info){
iout<- newsimpact(garchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error with Standard Garch"),ylab="predicted variance")
models[[i]] <- garchfit
models[[5+i]] <- garchspec
}else{
iout<-newsimpact(gjrgarchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error with GJR Garch"),ylab="predicted variance")
models[[i]] <- gjrgarchfit
models[[5+i]] <- gjrgarchspec
}
Infolist <- list("sAIC" = sAIC,"sBIC" = sBIC, "gjrAIC" = gjrAIC,"gjrBIC" = gjrBIC)
#look at standard AIC (in fund order)
sAIC
#look at standard BIC
sBIC
#look at gjr AIC
gjrAIC
#look at gjrBIC
gjrBIC
}
#------------------------Validate Model----------------
# Ljung-Box Test for Autocorrelation
# Goodness-to-fit Test for white noise normality
# ARCH LM Test for ARCH Effect
plotlist <- list("CI1","CI2","CI3","CI4","CI5","VaR1","VaR2","VaR3","VaR4","VaR5")
for(i in 1:5){
model <- models[[i]]
spec <- models[[5+i]]
model
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1848,
refit.window="moving",
refit.every=5,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5),
solver="hybrid")
#gjrgarchroll = resume(gjrgarchroll,solver="gosolnp",solver.control=list(tol=1e-4,delta=1e-5))
preds <- as.data.frame(gjrgarchroll)
#calculating 95% CIs for each prediction
preds$lower_bound <- preds$Mu - 1.96*preds$Sigma
preds$upper_bound <- preds$Mu + 1.96*preds$Sigma
preds$days <- as.Date(rownames(preds))
#calculate coverage rate
CR <- mean(preds$Realized <= preds$upper_bound & preds$Realized >= preds$lower_bound)
#plot CI
plot <- ggplot(data = preds, aes(x=days, y=Realized,group = 1)) +
geom_line() +
geom_ribbon(data = preds,aes(ymin = lower_bound,ymax = upper_bound),alpha = 0.3)+
ggtitle(paste0("CIs for predicted returns for ",names[i]," Funds with coverage rate ",CR))
plotlist[[i]] <- plot
gjrgarchVaR <- quantile(gjrgarchroll,probs=.05)
gjrgarchVaR
actual <- xts(as.data.frame(gjrgarchroll)$Realized, time(gjrgarchVaR))
#calculate VaR Coverage
VaR <- VaRplot(alpha=.05,actual=actual,VaR=gjrgarchVaR,title = (paste0("VaR with alpha = 5% for ",names[i]," Funds with VaR Coverage ",VaR)))
m <- mean(actual<gjrgarchVaR)
plotlist[[5+i]] <- VaR
plotlist[[10+i]] <- m
print(paste0(names[i]," Completed"))
}
?data.frame
x <- data.frame(1,1:10)
x
x <- data.frame(row.names = 1:14)
x
x$x <- 1:14
x
#------------------------Forecast------------------------
# GARCH forecast
sdf <- data.frame(row.names = 1:13)
#------------------------Forecast------------------------
# GARCH forecast
sdf <- data.frame(row.names = 1:13)
for (i in 1:5){
gjrgarchfit <- ugarchfit(data=datalist[[i]], spec=models[[5+i]], out.sample = 13)
gjrgarchforecast <- ugarchforecast(fitORspec=gjrgarchfit, n.ahead=13, n.roll=13)
print(gjrgarchforecast)
#plot series
series <- gjrgarchforecast@forecast$seriesFor[,14]
days <- seq(1,13,1)
plot1 <- plot(days,series,type = "l")
plot1
#plot sigmas
sdf[,i] <- gjrgarchforecast@forecast$sigmaFor[,14]
plot2 <- plot(days,sigmas,type = "l")
plot2
# VaR based on predicted returns
VaR.predict <- as.numeric(quantile(gjrgarchforecast,probs=.05))
}
#------------------------Forecast------------------------
# GARCH forecast
sdf <- data.frame(row.names = 1:13)
for (i in 1:5){
gjrgarchfit <- ugarchfit(data=datalist[[i]], spec=models[[5+i]], out.sample = 13)
gjrgarchforecast <- ugarchforecast(fitORspec=gjrgarchfit, n.ahead=13, n.roll=13)
print(gjrgarchforecast)
#plot series
series <- gjrgarchforecast@forecast$seriesFor[,14]
days <- seq(1,13,1)
plot1 <- plot(days,series,type = "l")
plot1
#plot sigmas
sdf[,i] <- gjrgarchforecast@forecast$sigmaFor[,14]
# VaR based on predicted returns
VaR.predict <- as.numeric(quantile(gjrgarchforecast,probs=.05))
}
sdf
colnames(sdf) <- c("sigma_XLI","sigma_XLV","sigma_XLK","sigma_XLF","sigma_XLE")
sdf$days <- colnames(sdf)
sdf$days <- rownames(sdf)
knitr::opts_chunk$set(echo = TRUE)
library(rugarch)
library(xts)
library(PerformanceAnalytics)
library(ggplot2)
library(tidyr)
sdf <- sdf %>% gather("Sector","Sigma",-days)
View(sdf)
ggplot(data = sdf,aex(x = days,y = sigma,Sector = Sector))+
geom_line()
ggplot(data = sdf,aes(x = days,y = sigma,Sector = Sector))+
geom_line()
#------------------------Forecast------------------------
# GARCH forecast
sdf <- data.frame(row.names = 1:13)
for (i in 1:5){
gjrgarchfit <- ugarchfit(data=datalist[[i]], spec=models[[5+i]], out.sample = 13)
gjrgarchforecast <- ugarchforecast(fitORspec=gjrgarchfit, n.ahead=13, n.roll=13)
print(gjrgarchforecast)
#plot series
series <- gjrgarchforecast@forecast$seriesFor[,14]
days <- seq(1,13,1)
plot1 <- plot(days,series,type = "l")
plot1
#plot sigmas
sdf[,i] <- gjrgarchforecast@forecast$sigmaFor[,14]
# VaR based on predicted returns
VaR.predict <- as.numeric(quantile(gjrgarchforecast,probs=.05))
}
colnames(sdf) <- c("sigma_XLI","sigma_XLV","sigma_XLK","sigma_XLF","sigma_XLE")
sdf$days <- as.numeric(rownames(sdf))
sdf <- sdf %>% gather("Sector","Sigma",-days)
ggplot(data = sdf,aes(x = days,y = sigma,Sector = Sector))+
geom_line()
ggplot(data = sdf,aes(x = days,y = Sigma,Sector = Sector))+
geom_line()
ggplot(data = sdf,aes(x = days,y = Sigma,color = Sector))+
geom_line()
#------------------------Validate Model----------------
# Ljung-Box Test for Autocorrelation
# Goodness-to-fit Test for white noise normality
# ARCH LM Test for ARCH Effect
plotlist <- list("CI1","CI2","CI3","CI4","CI5","VaR1","VaR2","VaR3","VaR4","VaR5")
for(i in 1:5){
model <- models[[i]]
spec <- models[[5+i]]
model
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1848,
refit.window="moving",
refit.every=5,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5),
solver="hybrid")
#gjrgarchroll = resume(gjrgarchroll,solver="gosolnp",solver.control=list(tol=1e-4,delta=1e-5))
preds <- as.data.frame(gjrgarchroll)
#calculating 95% CIs for each prediction
preds$lower_bound <- preds$Mu - 1.96*preds$Sigma
preds$upper_bound <- preds$Mu + 1.96*preds$Sigma
preds$days <- as.Date(rownames(preds))
#calculate coverage rate
CR <- mean(preds$Realized <= preds$upper_bound & preds$Realized >= preds$lower_bound)
#plot CI
plot <- ggplot(data = preds, aes(x=days, y=Realized,group = 1)) +
geom_line() +
geom_ribbon(data = preds,aes(ymin = lower_bound,ymax = upper_bound),alpha = 0.3)+
ggtitle(paste0("CIs for predicted returns for ",names[i]," Funds with coverage rate ",CR))
plotlist[[i]] <- plot
gjrgarchVaR <- quantile(gjrgarchroll,probs=.05)
gjrgarchVaR
actual <- xts(as.data.frame(gjrgarchroll)$Realized, time(gjrgarchVaR))
#calculate VaR Coverage
VaR <- VaRplot(alpha=.05,actual=actual,VaR=gjrgarchVaR,title = (paste0("VaR with alpha = 5% for ",names[i]," Funds with VaR Coverage ",VaR)))
m <- mean(actual<gjrgarchVaR)
plotlist[[5+i]] <- VaR
plotlist[[10+i]] <- m
print(paste0(names[i]," Completed"))
}
#------------------------Validate Model----------------
# Ljung-Box Test for Autocorrelation
# Goodness-to-fit Test for white noise normality
# ARCH LM Test for ARCH Effect
plotlist <- list("CI1","CI2","CI3","CI4","CI5","VaR1","VaR2","VaR3","VaR4","VaR5")
for(i in 1:5){
model <- models[[i]]
spec <- models[[5+i]]
model
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1848,
refit.window="moving",
refit.every=5,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5),
solver="hybrid")
#gjrgarchroll = resume(gjrgarchroll,solver="gosolnp",solver.control=list(tol=1e-4,delta=1e-5))
preds <- as.data.frame(gjrgarchroll)
#calculating 95% CIs for each prediction
preds$lower_bound <- preds$Mu - 1.96*preds$Sigma
preds$upper_bound <- preds$Mu + 1.96*preds$Sigma
preds$days <- as.Date(rownames(preds))
#calculate coverage rate
CR <- mean(preds$Realized <= preds$upper_bound & preds$Realized >= preds$lower_bound)
#plot CI
plot <- ggplot(data = preds, aes(x=days, y=Realized,group = 1)) +
geom_line() +
geom_ribbon(data = preds,aes(ymin = lower_bound,ymax = upper_bound),alpha = 0.3)+
ggtitle(paste0("CIs for predicted returns for ",names[i]," Funds with coverage rate ",CR))
plotlist[[i]] <- plot
gjrgarchVaR <- quantile(gjrgarchroll,probs=.05)
gjrgarchVaR
actual <- xts(as.data.frame(gjrgarchroll)$Realized, time(gjrgarchVaR))
#calculate VaR Coverage
VaR <- VaRplot(alpha=.05,actual=actual,VaR=gjrgarchVaR,title = (paste0("VaR with alpha = 5% for ",names[i]," Funds with VaR Coverage ",VaR)))
m <- mean(actual<gjrgarchVaR)
plotlist[[5+i]] <- VaR
plotlist[[10+i]] <- m
print(paste0(names[i]," Completed"))
}
for (i in 1:5){
plot <- plotlist[[i]]
plot(plot)
}
for (i in 1:5){
plot <- plotlist[[i]]
plot(plot)
m <- plotlist[[i+10]]
m
}
for (i in 1:5){
plot <- plotlist[[i]]
plot(plot)
m <- plotlist[[i+10]]
print(m)
}
#------------------------Validate Model----------------
# Ljung-Box Test for Autocorrelation
# Goodness-to-fit Test for white noise normality
# ARCH LM Test for ARCH Effect
plotlist <- list("CI1","CI2","CI3","CI4","CI5","VaR1","VaR2","VaR3","VaR4","VaR5")
for(i in 1:5){
model <- models[[i]]
spec <- models[[5+i]]
model
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1848,
refit.window="moving",
refit.every=5,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5),
solver="hybrid")
#gjrgarchroll = resume(gjrgarchroll,solver="gosolnp",solver.control=list(tol=1e-4,delta=1e-5))
preds <- as.data.frame(gjrgarchroll)
#calculating 95% CIs for each prediction
preds$lower_bound <- preds$Mu - 1.96*preds$Sigma
preds$upper_bound <- preds$Mu + 1.96*preds$Sigma
preds$days <- as.Date(rownames(preds))
#calculate coverage rate
CR <- mean(preds$Realized <= preds$upper_bound & preds$Realized >= preds$lower_bound)
#plot CI
plot <- ggplot(data = preds, aes(x=days, y=Realized,group = 1)) +
geom_line() +
geom_ribbon(data = preds,aes(ymin = lower_bound,ymax = upper_bound),alpha = 0.3)+
ggtitle(paste0("CIs for predicted returns for ",names[i]," Funds with coverage rate ",CR))
plotlist[[i]] <- plot
gjrgarchVaR <- quantile(gjrgarchroll,probs=.05)
gjrgarchVaR
actual <- xts(as.data.frame(gjrgarchroll)$Realized, time(gjrgarchVaR))
#calculate VaR Coverage
VaR <- VaRplot(alpha=.05,actual=actual,VaR=gjrgarchVaR,title = (paste0("VaR with alpha = 5% for ",names[i]," Funds with VaR Coverage ",VaR)))
m <- mean(actual<gjrgarchVaR)
print(m)
plotlist[[5+i]] <- VaR
plotlist[[10+i]] <- m
print(paste0(names[i]," Completed"))
}
