garchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "sGARCH"),
distribution.model = "std")
gjrgarchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "gjrGARCH"),
distribution.model = "std")
# GARCH fit
garchfit <- ugarchfit(data=datalist[[i]], spec=garchspec)
gjrgarchfit <- ugarchfit(data=datalist[[i]], spec=gjrgarchspec)
# ICs for choosing model
sg_info <- infocriteria(garchfit)[1]
gjrg_info <- infocriteria(gjrgarchfit)[1]
if (sg_info <= gjrg_info){
iout<- newsimpact(garchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error"),ylab="predicted variance")
models[[i]] <- garchfit
}else{
iout<-newsimpact(gjrgarchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error"),ylab="predicted variance")
models[[i]] <- gjrgarchfit
}
}
models <- list("XLI","XLV","XLK","XLF","XLE")
# refit GARCH spec with t distribution assumption
for (i in 1:5){
order <- arma[[i]]
garchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "sGARCH"),
distribution.model = "std")
gjrgarchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "gjrGARCH"),
distribution.model = "std")
# GARCH fit
garchfit <- ugarchfit(data=datalist[[i]], spec=garchspec)
gjrgarchfit <- ugarchfit(data=datalist[[i]], spec=gjrgarchspec)
# ICs for choosing model
sg_info <- infocriteria(garchfit)[1]
gjrg_info <- infocriteria(gjrgarchfit)[1]
if (sg_info <= gjrg_info){
iout<- newsimpact(garchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error with Standard Garch"),ylab="predicted variance")
models[[i]] <- garchfit
}else{
iout<-newsimpact(gjrgarchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error with GJR Garch"),ylab="predicted variance")
models[[i]] <- gjrgarchfit
}
}
??ugarchspec
t <- c("std","std","sstd","sstd","std")
models <- list("XLI","XLV","XLK","XLF","XLE")
t <- c("std","std","sstd","sstd","std")
# refit GARCH spec with t distribution assumption
for (i in 1:5){
order <- arma[[i]]
garchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "sGARCH"),
distribution.model = t[i])
gjrgarchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "gjrGARCH"),
distribution.model = t[i])
# GARCH fit
garchfit <- ugarchfit(data=datalist[[i]], spec=garchspec)
gjrgarchfit <- ugarchfit(data=datalist[[i]], spec=gjrgarchspec)
# ICs for choosing model
sg_info <- infocriteria(garchfit)[1]
gjrg_info <- infocriteria(gjrgarchfit)[1]
if (sg_info <= gjrg_info){
iout<- newsimpact(garchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error with Standard Garch"),ylab="predicted variance")
models[[i]] <- garchfit
}else{
iout<-newsimpact(gjrgarchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error with GJR Garch"),ylab="predicted variance")
models[[i]] <- gjrgarchfit
}
}
i = 2
order <- arma[[i]]
garchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "sGARCH"),
distribution.model = t[i])
gjrgarchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "gjrGARCH"),
distribution.model = t[i])
# GARCH fit
garchfit <- ugarchfit(data=datalist[[i]], spec=garchspec)
gjrgarchfit <- ugarchfit(data=datalist[[i]], spec=gjrgarchspec)
datalist[[i]]
sg_info <- infocriteria(garchfit)[1]
gjrg_info <- infocriteria(gjrgarchfit)[1]
sg_info
gjrg_info
for(i in 1:5){
models[[i]]
}
models[[i]]
for(i in 1:5){
model <- models[[i]]
model
}
head(model)
model@model
model@fit
models <- list("fit","spec")
models$fit[i] <- garchfit
models@fit[i]
models$fit[i]
models$fit[i] <- garchfit
models[[1]][i] <- garchfit
models <- list("XLI_fit","XLV_fit","XLK_fit","XLF_fit","XLE_fit","XLI_spec","XLV_spec","XLK_spec","XLF_spec","XLE_spec")
t <- c("std","std","sstd","sstd","std")
models[[i]] <- garchfit
models <- list("XLI_fit","XLV_fit","XLK_fit","XLF_fit","XLE_fit","XLI_spec","XLV_spec","XLK_spec","XLF_spec","XLE_spec")
t <- c("std","std","sstd","sstd","std")
# refit GARCH spec with t distribution assumption
for (i in 1:5){
order <- arma[[i]]
garchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "sGARCH"),
distribution.model = t[i])
gjrgarchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "gjrGARCH"),
distribution.model = t[i])
# GARCH fit
garchfit <- ugarchfit(data=datalist[[i]], spec=garchspec)
gjrgarchfit <- ugarchfit(data=datalist[[i]], spec=gjrgarchspec)
# ICs for choosing model
sg_info <- infocriteria(garchfit)[1]
gjrg_info <- infocriteria(gjrgarchfit)[1]
if (sg_info <= gjrg_info){
iout<- newsimpact(garchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error with Standard Garch"),ylab="predicted variance")
models[[i]] <- garchfit
models[[5+i]] <- garchspec
}else{
iout<-newsimpact(gjrgarchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error with GJR Garch"),ylab="predicted variance")
models[[i]] <- gjrgarchfit
models[[5+i]] <- gjrgarchspec
}
}
#------------------------Validate Model----------------
# Ljung-Box Test for Autocorrelation
# Goodness-to-fit Test for white noise normality
# ARCH LM Test for ARCH Effect
for(i in 1:5){
model <- models[[i]]
spec <- models[[5+i]]
model
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=1948,
refit.window="moving", refit.every=1,n.ahead = 1)
preds <- as.data.frame(gjrgarchroll)
#calculationg 95% CIs for each prediction
preds$lower_bound <- preds$Mu - 1.96*preds$Sigma
preds$upper_bound <- preds$Mu + 1.96*preds$Sigma
preds$days <- as.Date(rownames(preds))
#plot CI
ggplot(data = preds, aes(x=days, y=Realized,group = 1)) +
geom_line() +
geom_ribbon(data = preds,aes(ymin = lower_bound,ymax = upper_bound),alpha = 0.3)+
ggtitle(paste0("CIs for predicted returns for ",names[i]," Funds"))
#coverage rate (94.7% close to 95%)
CR <- mean(preds$Realized <= preds$upper_bound & preds$Realized >= preds.v$lower_bound)
print(paste0("Coverage Rate for Fund",names[i]," is ",CR))
gjrgarchVaR <- quantile(gjrgarchroll,probs=.05)
actual <- xts(as.data.frame(gjrgarchroll)$Realized, time(gjrgarchVaR))
VaRplot(alpha=.05,actual=actual,VaR=gjrgarchVaR)
mean(actual<gjrgarchVaR) # pretty close to alpha=.05
}
models <- list("XLI_fit","XLV_fit","XLK_fit","XLF_fit","XLE_fit","XLI_spec","XLV_spec","XLK_spec","XLF_spec","XLE_spec")
t <- c("std","std","sstd","sstd","std")
# refit GARCH spec with t distribution assumption
for (i in 1:5){
order <- arma[[i]]
garchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "sGARCH"),
distribution.model = t[i])
gjrgarchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "gjrGARCH"),
distribution.model = t[i])
# GARCH fit
garchfit <- ugarchfit(data=datalist[[i]], spec=garchspec,solver="hybrid")
gjrgarchfit <- ugarchfit(data=datalist[[i]], spec=gjrgarchspec,solver="hybrid")
# ICs for choosing model
sg_info <- infocriteria(garchfit)[1]
gjrg_info <- infocriteria(gjrgarchfit)[1]
if (sg_info <= gjrg_info){
iout<- newsimpact(garchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error with Standard Garch"),ylab="predicted variance")
models[[i]] <- garchfit
models[[5+i]] <- garchspec
}else{
iout<-newsimpact(gjrgarchfit) # a visualization for leverage effect (used in final report)
plot(iout$zx,iout$zy,xlab=paste0(names[i]," prediction error with GJR Garch"),ylab="predicted variance")
models[[i]] <- gjrgarchfit
models[[5+i]] <- gjrgarchspec
}
}
garchspec <- ugarchspec(mean.model = list(armaOrder = order),
variance.model = list(model = "sGARCH"),
distribution.model = t[i],solver="hybrid")
#------------------------Validate Model----------------
# Ljung-Box Test for Autocorrelation
# Goodness-to-fit Test for white noise normality
# ARCH LM Test for ARCH Effect
for(i in 1:5){
model <- models[[i]]
spec <- models[[5+i]]
model
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=1948,
refit.window="moving", refit.every=1,n.ahead = 1)
preds <- as.data.frame(gjrgarchroll)
#calculationg 95% CIs for each prediction
preds$lower_bound <- preds$Mu - 1.96*preds$Sigma
preds$upper_bound <- preds$Mu + 1.96*preds$Sigma
preds$days <- as.Date(rownames(preds))
#plot CI
ggplot(data = preds, aes(x=days, y=Realized,group = 1)) +
geom_line() +
geom_ribbon(data = preds,aes(ymin = lower_bound,ymax = upper_bound),alpha = 0.3)+
ggtitle(paste0("CIs for predicted returns for ",names[i]," Funds"))
#coverage rate (94.7% close to 95%)
CR <- mean(preds$Realized <= preds$upper_bound & preds$Realized >= preds.v$lower_bound)
print(paste0("Coverage Rate for Fund",names[i]," is ",CR))
gjrgarchVaR <- quantile(gjrgarchroll,probs=.05)
actual <- xts(as.data.frame(gjrgarchroll)$Realized, time(gjrgarchVaR))
VaRplot(alpha=.05,actual=actual,VaR=gjrgarchVaR)
mean(actual<gjrgarchVaR) # pretty close to alpha=.05
}
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=2000,
refit.window="moving", refit.every=1,n.ahead = 1)
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=2030,
refit.window="moving", refit.every=1,n.ahead = 1)
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=2130,
refit.window="moving", refit.every=1,n.ahead = 1)
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=2230,
refit.window="moving", refit.every=1,n.ahead = 1)
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=2230,
refit.window="moving", refit.every=1,n.ahead = 1,, solver = 'hybrid')
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=2030,
refit.window="moving", refit.every=1,n.ahead = 1,
solver = 'hybrid')
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=2030,
refit.window="moving", refit.every=2,n.ahead = 1,
solver = 'hybrid')
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=2030,
refit.window="moving", refit.every=2,n.ahead = 2,
solver = 'hybrid')
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=2030,
refit.window="moving", refit.every=2,n.ahead = 1,
solver = 'hybrid')
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=2030,
refit.window="moving", refit.every=3,n.ahead = 1,
solver = 'hybrid')
i = 2
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=2030,
refit.window="moving", refit.every=3,n.ahead = 1,
solver = 'hybrid')
View(data)
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=2030,
refit.window="moving", refit.every=1,n.ahead = 1,
solver = 'hybrid')
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=1950,
refit.window="moving", refit.every=1,n.ahead = 1,
solver = 'hybrid')
model <- models[[i]]
spec <- models[[5+i]]
model
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=1950,
refit.window="moving", refit.every=1,n.ahead = 1,
solver = 'hybrid')
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=1948,
refit.window="moving", refit.every=1,n.ahead = 1)
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=1948,
refit.window="moving", refit.every=1,n.ahead = 1,solver.control = list(tol = 1e-12))
??ugarchroll
# GARCH backtest using VaR for rolling windows
nstart -> 500
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]], n.start=1848,
refit.window="moving", refit.every=2,n.ahead = 1,
forecast.length = 500)
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1848,
refit.window="moving",
refit.every=2,
n.ahead = 1,
solver.control=list(tol=1e-5, delta=1e-6))
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1848,
refit.window="moving",
refit.every=2,
n.ahead = 1,
solver.control=list(tol=1e-5, delta=1e-6))
gjrgarchroll = resume(gjrgarchroll,
solver="gosolnp",
solver.control=list(tol=1e-4,delta=1e-5))
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1948,
refit.window="moving",
refit.every=5,
n.ahead = 1,
solver.control=list(tol=1e-5, delta=1e-6))
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1948,
refit.window="moving",
refit.every=5,
n.ahead = 1,
solver.control=list(tol=1e-12, delta=1e-6))
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1948,
refit.window="moving",
refit.every=5,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5))
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=2048,
refit.window="moving",
refit.every=5,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5))
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=2048,
refit.window="moving",
refit.every=10,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5))
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=2048,
refit.window="moving",
refit.every=15,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5))
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1848,
refit.window="moving",
refit.every=15,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5))
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1848,
refit.window="moving",
refit.every=15,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5),
solver="hybrid")
preds <- as.data.frame(gjrgarchroll)
preds$lower_bound <- preds$Mu - 1.96*preds$Sigma
preds$upper_bound <- preds$Mu + 1.96*preds$Sigma
preds$days <- as.Date(rownames(preds))
#plot CI
ggplot(data = preds, aes(x=days, y=Realized,group = 1)) +
geom_line() +
geom_ribbon(data = preds,aes(ymin = lower_bound,ymax = upper_bound),alpha = 0.3)+
ggtitle(paste0("CIs for predicted returns for ",names[i]," Funds"))
#------------------------Validate Model----------------
# Ljung-Box Test for Autocorrelation
# Goodness-to-fit Test for white noise normality
# ARCH LM Test for ARCH Effect
for(i in 1:5){
model <- models[[i]]
spec <- models[[5+i]]
model
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1848,
refit.window="moving",
refit.every=15,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5),
solver="hybrid")
#gjrgarchroll = resume(gjrgarchroll,solver="gosolnp",solver.control=list(tol=1e-4,delta=1e-5))
preds <- as.data.frame(gjrgarchroll)
#calculationg 95% CIs for each prediction
preds$lower_bound <- preds$Mu - 1.96*preds$Sigma
preds$upper_bound <- preds$Mu + 1.96*preds$Sigma
preds$days <- as.Date(rownames(preds))
#plot CI
ggplot(data = preds, aes(x=days, y=Realized,group = 1)) +
geom_line() +
geom_ribbon(data = preds,aes(ymin = lower_bound,ymax = upper_bound),alpha = 0.3)+
ggtitle(paste0("CIs for predicted returns for ",names[i]," Funds"))
#coverage rate (94.7% close to 95%)
CR <- mean(preds$Realized <= preds$upper_bound & preds$Realized >= preds.v$lower_bound)
print(paste0("Coverage Rate for Fund",names[i]," is ",CR))
gjrgarchVaR <- quantile(gjrgarchroll,probs=.05)
actual <- xts(as.data.frame(gjrgarchroll)$Realized, time(gjrgarchVaR))
VaRplot(alpha=.05,actual=actual,VaR=gjrgarchVaR)
mean(actual<gjrgarchVaR) # pretty close to alpha=.05
}
#------------------------Validate Model----------------
# Ljung-Box Test for Autocorrelation
# Goodness-to-fit Test for white noise normality
# ARCH LM Test for ARCH Effect
for(i in 1:5){
model <- models[[i]]
spec <- models[[5+i]]
model
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1848,
refit.window="moving",
refit.every=15,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5),
solver="hybrid")
#gjrgarchroll = resume(gjrgarchroll,solver="gosolnp",solver.control=list(tol=1e-4,delta=1e-5))
preds <- as.data.frame(gjrgarchroll)
#calculationg 95% CIs for each prediction
preds$lower_bound <- preds$Mu - 1.96*preds$Sigma
preds$upper_bound <- preds$Mu + 1.96*preds$Sigma
preds$days <- as.Date(rownames(preds))
#plot CI
ggplot(data = preds, aes(x=days, y=Realized,group = 1)) +
geom_line() +
geom_ribbon(data = preds,aes(ymin = lower_bound,ymax = upper_bound),alpha = 0.3)+
ggtitle(paste0("CIs for predicted returns for ",names[i]," Funds"))
#coverage rate (94.7% close to 95%)
CR <- mean(preds$Realized <= preds$upper_bound & preds$Realized >= preds$lower_bound)
print(paste0("Coverage Rate for Fund",names[i]," is ",CR))
gjrgarchVaR <- quantile(gjrgarchroll,probs=.05)
actual <- xts(as.data.frame(gjrgarchroll)$Realized, time(gjrgarchVaR))
VaRplot(alpha=.05,actual=actual,VaR=gjrgarchVaR)
mean(actual<gjrgarchVaR) # pretty close to alpha=.05
}
#plot CI
plotlist <- list(5)
#------------------------Validate Model----------------
# Ljung-Box Test for Autocorrelation
# Goodness-to-fit Test for white noise normality
# ARCH LM Test for ARCH Effect
plotlist <- list("CI1","CI2","CI3","CI4","CI5","VaR1","VaR2","VaR3","VaR4","VaR5")
#------------------------Validate Model----------------
# Ljung-Box Test for Autocorrelation
# Goodness-to-fit Test for white noise normality
# ARCH LM Test for ARCH Effect
plotlist <- list("CI1","CI2","CI3","CI4","CI5","VaR1","VaR2","VaR3","VaR4","VaR5","CICov1","CICov2","CICov3","CICov4","CICov5","VaRCov1","VaRCov2","VaRCov3","VaRCov4","VaRCov5")
#------------------------Validate Model----------------
# Ljung-Box Test for Autocorrelation
# Goodness-to-fit Test for white noise normality
# ARCH LM Test for ARCH Effect
plotlist <- list("CI1","CI2","CI3","CI4","CI5","VaR1","VaR2","VaR3","VaR4","VaR5","CICov1","CICov2","CICov3","CICov4","CICov5","VaRCov1","VaRCov2","VaRCov3","VaRCov4","VaRCov5")
for(i in 1:5){
model <- models[[i]]
spec <- models[[5+i]]
model
# GARCH backtest using VaR for rolling windows
gjrgarchroll<- ugarchroll(spec, data=datalist[[i]],
n.start=1848,
refit.window="moving",
refit.every=5,
n.ahead = 1,
solver.control=list(tol=1e-4, delta=1e-5),
solver="hybrid")
#gjrgarchroll = resume(gjrgarchroll,solver="gosolnp",solver.control=list(tol=1e-4,delta=1e-5))
preds <- as.data.frame(gjrgarchroll)
#calculationg 95% CIs for each prediction
preds$lower_bound <- preds$Mu - 1.96*preds$Sigma
preds$upper_bound <- preds$Mu + 1.96*preds$Sigma
preds$days <- as.Date(rownames(preds))
#plot CI
plot <- ggplot(data = preds, aes(x=days, y=Realized,group = 1)) +
geom_line() +
geom_ribbon(data = preds,aes(ymin = lower_bound,ymax = upper_bound),alpha = 0.3)+
ggtitle(paste0("CIs for predicted returns for ",names[i]," Funds"))
plotlist[[i]] <- plot
#coverage rate (94.7% close to 95%)
CR <- mean(preds$Realized <= preds$upper_bound & preds$Realized >= preds$lower_bound)
print(paste0("Coverage Rate for Fund",names[i]," is ",CR))
plotlist[[10+i]] <- CR
gjrgarchVaR <- quantile(gjrgarchroll,probs=.05)
actual <- xts(as.data.frame(gjrgarchroll)$Realized, time(gjrgarchVaR))
VaR <- VaRplot(alpha=.05,actual=actual,VaR=gjrgarchVaR)
plotlist[[5+i]] <- VaR
VaRCov <- mean(actual<gjrgarchVaR)
plotlist[[15+i]] <- VaRCov
}
plotlist[[1:5]]
plotlist[[1]]
plotlist[[i]]
for (i in 1:5){
plotlist[[i]]
}
for (i in 1:5){
plotlist[[i]]
}
for (i in 1:5){
plot <- plotlist[[i]]
plot
}
for (i in 1:5){
plot <- plotlist[[i]]
plot(plot)
}
